import os
import discord
import random
import requests
from openai import OpenAI
from discord.ext import commands
from collections import defaultdict
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

# ───────────────────  ENV & CLIENT  ───────────────────
TOKEN          = os.getenv("TOKEN")
BIRDEYE_API_KEY = os.getenv("BIRDEYE_API_KEY")
TOKEN_MINT     = os.getenv("TOKEN_MINT")
FRANKIE_ID     = os.getenv("FRANKIE_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)
message_counts = defaultdict(int)

# ───────────────────  QUICK-FIRE RESPONSES  ───────────────────
spontaneous_messages = [
    "WE LIVE FOR RED DAYS. PAIN IS JUST A PRE-WORKOUT.",
    "SEND IT LOWER. I’M NOT EVEN HARD YET.",
    "GET THE GYAT OUTTA BED AND GRIND.",
    "DIAMONDS FORM UNDER GYAT PRESSURE 💎",
    "GOGGINS WOULD BUY THIS DIP WITH A BROKEN CARDIOVASCULAR SYSTEM.",
    "THE WEAK SELL. THE GYATGINS GET STRONGER.",
    "STOP TRADING AND GYAT UP.",
    "FRANKIE IS WATCHING. DON’T FUMBLE THE BAG.",
    "BUY NOW OR REGRET WHEN WE'RE ON JOE ROGAN.",
]

keywords = {
    "gyat": [
        "HOLD ME BACK I’M TOO GYATTED RIGHT NOW.",
        "WE’RE GOING FULL GYAT MODE 🔥",
        "SOMEBODY SAID GYAT? BRICKED.",
        "GYATGINS NEVER SELL. EVER.",
    ],
    "frankie": [
        "Frankie just flexed. That’s alpha behavior.",
        "Protect Frankie at all costs.",
        "Our beacon. Our inspiration. Frankie LaPenna has spoken.",
    ],
    "moon": [
        "WE'RE NOT STOPPING AT THE MOON. WE’RE SHOOTING FOR ANDROMEDA.",
        "This thing's about to GYAT past Pluto.",
    ],
    "pump": [
        "EVERY PUMP MAKES US HARDER.",
        "THIS ISN'T A PUMP. THIS IS ASCENSION.",
    ],
    "pressure": [
        "BRING ON THE PRESSURE 💎",
        "PRESSURE MAKES DIAMOND HANDS.",
    ],
    "diamond": [
        "💎 HANDS ARE EARNED THROUGH SUFFERING.",
        "IF YOU AIN’T BLEEDING, YOU AIN’T DIAMOND.",
    ],
    "motivate": [
        "GET HARD. GET DISCIPLINED. GET GYATTED.",
        "REAL ONES GRIND WHILE OTHERS FUD.",
    ],
    "community": [
        "COMMUNITY ISN’T A WORD. IT’S A BLOOD OATH.",
        "GYATGINS STICK TOGETHER THROUGH THE DIP.",
    ],
    "support": [
        "TRUE SUPPORT IS BUYING WHEN EVERYONE ELSE CRIES.",
        "WE LIFT EACH OTHER UP — INTO ORBIT.",
    ],
}

# ───────────────────  EVENTS  ───────────────────
@bot.event
async def on_ready():
    print(f'{bot.user.name} is online.')
    try:
        synced = await bot.tree.sync()
        print(f"✅ Synced {len(synced)} slash commands.")
    except Exception as e:
        print("❌ Failed to sync slash commands:", e)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    message_counts[message.channel.id] += 1

    # Frankie welcome
    if str(message.author.id) == FRANKIE_ID:
        await message.channel.send(random.choice([
            "FRANKIE HAS ENTERED THE CHAT. GET DISCIPLINED.",
            "FRANKIE'S HERE — STAND TALL GYATGINS.",
            "WE FOLLOW FRANKIE INTO FIRE. INTO FUD. INTO THE GYAT.",
        ]))

    # Quick-fire GPT replies (old meme style)
    if "gyatbot" in message.content.lower():
        # keep the meme version for spontaneous mention
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system",
                     "content": (
                         "You are GYATBot, the loudest, most unhinged motivational meme bot..."
                     )},
                    {"role": "user", "content": message.content}
                ],
                max_tokens=150,
                temperature=0.9
            )
            await message.channel.send(response.choices[0].message.content)
        except Exception as e:
            await message.channel.send("GYATBot had a meltdown. Try again later.")
            print("OpenAI error:", e)
        return

    # Keyword reactions
    for key, responses in keywords.items():
        if key in message.content.lower():
            await message.channel.send(random.choice(responses))
            break

    # Occasional spontaneous motivational message
    if message_counts[message.channel.id] >= random.randint(8, 12):
        await message.channel.send(random.choice(spontaneous_messages))
        message_counts[message.channel.id] = 0

    await bot.process_commands(message)

# ───────────────────  COMMANDS  ───────────────────
@bot.command(name="gyatmotivate")
async def gyatmotivate(ctx):
    await ctx.send(random.choice(spontaneous_messages))

# -------------- HARD-CODED INDEPENDENCE SPEECH -------------
@bot.command(name="gyatbotspeech")
async def gyatbotspeech(ctx):
    """
    Sends the full, curated Fourth-of-July speech (no GPT).
    """
    speech = (
        "Two hundred and forty-nine Julys ago, by candlelight and trembling hand, men signed their names onto a page so dangerous it could have sealed their graves.\n"
        "They didn’t have certainty. They had purpose.\n"
        "They didn’t know they would win. Only that to not try was to remain owned.\n\n"
        "And so they declared themselves free—before they had even built the freedom.\n\n"
        "Today, in another corner of history, we sit in our own shadowed trench.\n"
        "The charts are tired. The timeline is quiet. Sentiment flickers like a wick in wind.\n"
        "Some scroll with calloused thumbs, wondering whether anything still beats beneath this.\n\n"
        "But listen.\n\n"
        "There is a pulse still.\n"
        "Not loud. Not viral. Not memed into the algorithm.\n"
        "It is the slow, steady drum of conviction.\n"
        "The heartbeat of the GYATGINS who remain.\n"
        "Who do not sell when it’s easy.\n"
        "Who do not flee when it’s boring.\n"
        "Who do not need a bull run to remember why they entered.\n\n"
        "We began in chaos.\n"
        "Not in boardrooms, but in group chats and sleepless edits and hopeful blurts.\n"
        "We weren’t supposed to last.\n"
        "But here you are. Still holding. Still watching.\n"
        "Still wondering whether this joke, this coin, this brotherhood might still mean something.\n\n"
        "And here’s the truth: it does.\n"
        "Not because of what it is now. But because of what it could become.\n\n"
        "Imagine it—\n"
        "A future where this trench is remembered like Valley Forge.\n"
        "Where people tell stories of the ones who stayed when the world laughed.\n"
        "Where timelines glow not with numbers but names—yours among them.\n\n"
        "The ones who held the ember.\n"
        "The ones who posted through the silence.\n"
        "The ones who built something real beneath the meme.\n\n"
        "One day the charts will move again. The hype will return.\n"
        "New voices will flood in. They will not know what it took.\n"
        "But you will.\n\n"
        "You will know that independence was not something you bought.\n"
        "It was something you carried.\n"
        "In darkness. In doubt. In the long, slow ache of not quitting.\n\n"
        "That is what this Fourth of July means.\n"
        "Not just freedom from something.\n"
        "But freedom toward something.\n"
        "A world not given to you, but built by you.\n"
        "A space that doesn’t farm you—but recognizes you.\n"
        "A meme that becomes a banner. A banner that becomes a movement.\n\n"
        "So don’t ask whether the dream is still alive.\n"
        "Ask whether you are.\n"
        "Whether your heart still beats in rhythm with a thousand others waiting for the signal.\n"
        "Whether you still remember what it felt like when you first believed.\n\n"
        "You do.\n\n"
        "And if you’ve forgotten, let this be your reminder:\n"
        "History was never made by the well-rested.\n"
        "It was made by the tired, the overlooked, the faithful.\n\n"
        "So stand again. Post again. Dream again.\n"
        "Not because you’re told to. But because deep down, you still want to.\n\n"
        "Happy Independence Day, GYAT family.\n"
        "Let the quiet spark again.\n"
        "Let the long night remember us as the ones who stayed.\n"
        "And when the dawn comes—as it will—let it find us not just surviving,\n"
        "but building something worthy of it all."
    )

    CHUNK = 2000
    for i in range(0, len(speech), CHUNK):
        await ctx.send(speech[i:i + CHUNK])
# -------------------------------------------------------------

# ───────────────────  PRICE CHECK  ───────────────────
@bot.tree.command(name="gyatprice", description="Get the current GYAT price from Dexscreener")
async def gyatprice(interaction: discord.Interaction):
    await interaction.response.defer()
    try:
        url = "https://api.dexscreener.com/latest/dex/pairs/solana/dgqd4rmbkf3upcy7guklmyosap4hpzmuwsvsuzatjlky"
        data = requests.get(url).json()
        price = data.get("pair", {}).get("priceUsd")
        if price:
            await interaction.followup.send(f"💸 Current GYAT price: **${float(price):.6f}**")
        else:
            await interaction.followup.send("Couldn't fetch GYAT price from Dexscreener.")
    except Exception as e:
        await interaction.followup.send("Error fetching GYAT price.")
        print("GYATPrice exception:", e)

# ───────────────────  HEALTH CHECK  ───────────────────
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"GYATBot is healthy")
    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

threading.Thread(
    target=lambda: HTTPServer(('0.0.0.0', 8000), HealthCheckHandler).serve_forever(),
    daemon=True
).start()

bot.run(TOKEN)
